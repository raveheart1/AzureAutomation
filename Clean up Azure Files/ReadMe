# Azure Automation Guide: Deleting Files Older than a Specific Number of Days

This guide will help you use the provided PowerShell script which deletes files in a specified Azure Storage Account (specifically within an Azure File Share) that are older than a specified number of days. This script leverages either a system-assigned or user-assigned managed identity.

## Prerequisites

- Azure Subscription
- Azure Automation Account
- Existing Azure Storage Account with a File Share
- Access to Azure Key Vault containing the Storage Account key

## Modules Needed

This script requires the following PowerShell Az modules:

- Az.Accounts
- Az.KeyVault
- Az.Storage

Ensure these modules are imported to your Automation Account. If they are not, you'll need to import them before running the script.

## Using the Script

1. **Create a Runbook**: In your Azure Automation Account, create a new Runbook. Select the type as PowerShell and paste the script.

2. **Provide parameters**: After pasting the script, review the parameters section and provide the necessary details:
    - `StorageAccountName`: Name of the Azure Storage Account from which files are to be deleted.
    - `FileShareName`: Name of the Azure File Share from which files are to be deleted.
    - `keyVault`: Name of the Azure Key Vault where the storage account key is stored.
    - `secretName`: Name of the secret in the Key Vault that stores the storage account key.

3. **Managed Identity**: The script is set to use a System Assigned Managed Identity by default. If you want to use a User Assigned Managed Identity, change `$method = "SA"` to `$method = "UA"` and provide the details of the user-assigned managed identity in the script.

4. **Run the Runbook**: Once all parameters have been populated correctly, publish the runbook and then start it. You can monitor the progress of the runbook from the output section in the Azure portal.

Please note that this script has the potential to delete data permanently. Ensure all parameters are set correctly and thoroughly test the script in a non-production environment before running it in a production environment.

## Errors and Debugging

In case of errors or issues, review the output logs in the Azure portal. The script includes error handling and will provide useful information in case of a failure.